#2-way merge sort is iterative
#Don't confuse with merge short which is recursive

#list=  [ 3 | 6 |   4 | 2 |   8 | 1 ]
          \   /      \  /      \  /
         [3 | 6]    [2 | 4]   [1 | 8]
            \         /           /
            [2 | 3 | 4 | 6 ]     /
                        \       /
                          \    /
                  [1 | 2 | 3 | 4 |6 |8]    Time Complexity = O(n(log n))
                  A=list(map(int,input().split()))
n=len(A)
new=[None]*n
for size in range(1,n):
    left1=0
    k=0
    while(left1+size<n):
        right1=left1+size-1
        left2=right1+1
        right2=left2+size-1
        if(right2>=n):
            right2=n-1
        i=left1
        j=left2
        while(i<=right1 and j<=right2):
            if(A[i]<A[j]):
                new[k]=A[i]
                i=i+1
                k=k+1
            else:
                new[k]=A[j]
                j=j+1
                k=k+1
        while(i<=right1):
            new[k]=A[i]
            i=i+1 
            k=k+1 
        while(j<=right2):
            new[k]=A[j]
            j=j+1 
            k=k+1    
        left1=right2+1
    i=left1
    while(k<n):
        new[k]=A[i]
        k=k+1
        i=i+1
    size=size*2
print(new)
    
        
